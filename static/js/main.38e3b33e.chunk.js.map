{"version":3,"sources":["components/Input.js","components/Region.js","components/Winners.js","components/Stats.js","components/UserStats/UserTable.js","components/UserStats/UserStats.js","App.js","serviceWorker.js","index.js"],"names":["Input","_ref","onChange","value","index","placeholder","react_default","a","createElement","className","type","Region","setName","setVariations","setQty","name","variations","qty","src_components_Input","join","Winners","winners","pickWinners","selectWinner","total","method","buttonText","status","length","onClick","map","region","i","key","arr","winner","author","id","href","target","rel","title","body","Stats","stats","downloadData","stat","download","UserTable","headings","data","username","totalComments","heading","obj","domain","count","toFixed","sub","url","account","provider","getCells","UserStats","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getSubmissions","asyncToGenerator","regenerator_default","mark","_callee","after","resp","json","submissionData","_args","arguments","wrap","_context","prev","next","undefined","queuedUsername","abrupt","fetch","sent","state","push","apply","toConsumableArray","children","setState","analyse","t0","stop","_x","getComments","_ref2","_callee2","commentData","_args2","_context2","_x2","gatherData","_callee3","temp","_context3","lock","clearFullData","domainsSubmittedFrom","subsSubmittedTo","accountsSubmittedFrom","subsCommentedTo","submissionCount","clearArrays","_this$state","ignoreProfile","focusSub","forEach","submission","subreddit","toLowerCase","addSubSubmitted","addDomain","addAccount","comment","addSubCommentedTo","sort","b","existingObj","find","accountLink","media","oembed","author_name","author_url","provider_name","end","replace","indexOf","slice","focusCount","_this$state2","setUsername","UserStats_UserTable","Component","App","setUrl","e","currentURL","processBlock","processText","setRegionName","_regions$index$variat","regions","getAttribute","_regions$index$variat2","setRegionVariations","split","val","trim","comments","onComplete","setRegionQty","parseInt","setIgnored","ignoredUsers","addRegion","removeRegion","pop","selectedWinner","percentage","allComments","then","handleErrors","response","kind","array","parseChild","link_id","getMoreComments","catch","err","ok","Error","statusText","updatePercentage","string","subArray","shift","idsThisTime","things","splice","child","stringsArr","replies","testValue","conditions","match","condition","RegExp","test","testRegions","extras","result","keys","values","others","sortComments","previousWinners","duplicates","ignored","parseList","list","hasId","toUpperCase","item","extra","results","encodeURI","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","_value","randomNumbers","random","chosen","asyncIterator","done","getRandomNumbers","return","finish","max","requestsLeft","winnersStatus","mode","headers","Content-Type","referrer","JSON","stringify","jsonrpc","params","apiKey","n","min","replacement","error","winnersMethod","randomNumberFallback","numbers","Math","includes","_this2","processClass","readOnly","src_components_Region","src_components_Stats","src_components_Winners","components_UserStats_UserStats","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.38e3b33e.chunk.js","sourcesContent":["import React from 'react';\nimport './Input.css';\n\nconst Input = ({onChange, value, index, placeholder}) => {\n    if (value === 0) value = '';\n    return (\n        <div>\n            <input className=\"input roundedBorder\" type=\"text\" onChange={onChange} value={value} index={index} placeholder={placeholder}/>\n        </div>\n    );\n}\n\nexport default Input;","import React from 'react';\nimport Input from './Input';\nimport './Region.css';\n\nconst Region = ({setName, setVariations, setQty, name, variations, qty, index}) => {\n    return (\n        <div className=\"region\">\n            <Input onChange={setName} value={name} index={index} placeholder='Region'/>\n            <Input onChange={setVariations} value={variations.join(',')} index={index} placeholder='Words to look for'/>\n            <Input onChange={setQty} value={qty} index={index} placeholder='Qty'/>\n        </div>\n    );\n};\n\nexport default Region;","import React from 'react';\nimport './Winners.css';\n\nconst Winners = ({winners, pickWinners, selectWinner, total, method, status}) => {\n    let buttonText = 'Pick Winners';\n    if (status === 0) buttonText = 'Loading...';\n    \n    if (winners.length === 0 && total > 0) {\n        return <div className=\"winners roundedBorder\"><button className=\"button green\" onClick={pickWinners}>{buttonText}</button></div>;\n    } else if (winners.length === 0) {\n        return <div></div>;\n    }\n    \n    return (\n        <div className=\"winners roundedBorder\">\n            <button className=\"button green\" onClick={pickWinners}>{buttonText}</button>\n            <p>Method used for random numbers: {method}</p>\n            <label>Winners</label>\n            <p>(Select one for user history and hover to see users comment)</p>\n            <div className=\"winnerRegions\">\n                {\n                    winners.map((region, i) => {\n                        return (\n                            <div className=\"winnerRegion roundedBorder\" key={i}>\n                                <label>{region.name}</label>\n                                {\n                                    region.arr.map((winner, i) => {\n                                        return (\n                                            <div key={i}>\n                                                <input type=\"radio\" name=\"winner\" onClick={selectWinner(winner.author)}/>{winner.id} - <a href={\"https://www.reddit.com/user/\"+winner.author} target=\"_blank\" rel=\"noopener noreferrer\" title={winner.body}>{winner.author}</a>\n                                            </div>\n                                        )\n                                    })\n                                }\n                            </div>\n                        );\n                    })\n                }\n            </div>\n        </div>\n    );\n};\n\nexport default Winners;","import React from 'react';\nimport './Stats.css';\n\nconst Stats = ({stats, total, downloadData}) => {\n    if (stats.length === 0) return <div></div>;\n    \n    return (\n        <div className=\"stats roundedBorder\">\n            <label>Stats</label>\n            {\n                stats.map((stat, i) => {\n                    return <div key={i}>{stat.name} - {stat.qty}</div>;\n                })\n            }\n            <div>Total - {total}</div>\n            <a href={\"data:text/csv;charset=utf-8,\"+downloadData} target=\"_blank\" download=\"list.csv\" rel=\"noopener noreferrer\">Download</a>\n        </div>\n    );\n};\n\nexport default Stats;","import React from 'react';\n\nconst UserTable = ({headings, data, type, total, username, totalComments}) => {\n    return (\n        <div className=\"tableDiv\">\n            <table className=\"userTable\">\n                <thead>\n                    <tr>\n                        {\n                            headings.map((heading,i) => <td key={i}>{heading}</td>)\n                        }\n                    </tr>\n                </thead>\n                {\n                    data && data.length > 0 ? (\n                        <tbody>\n                            {\n                                data.map((obj, i) => {\n                                    return getCells(obj, i);\n                                })\n                            }\n                        </tbody>\n                        \n                    ) : <tbody></tbody>\n                }\n            </table>\n        </div>\n    );\n    \n    function getCells(obj, i){\n        if (type === 'domains'){\n            return (\n                <tr key={i}>\n                    <td>{obj.domain}</td>\n                    <td>{obj.count}</td>\n                    <td>{((obj.count/total)*100).toFixed(0)}%</td>\n                </tr>\n            )\n        } else if (type === 'subsSubmitted'){\n            return (\n                <tr key={i}>\n                    <td><a href={\"https://www.reddit.com/r/\"+obj.sub+\"/search?q=author%3A\"+username+\"&restrict_sr=on&sort=new&feature=legacy_search\"} target=\"_blank\" rel=\"noopener noreferrer\">{obj.sub}</a></td>\n                    <td>{obj.count}</td>\n                    <td>{((obj.count/total)*100).toFixed(0)}%</td>\n                </tr>\n            )\n        } else if (type === 'subsCommented'){\n            return (\n                <tr key={i}>\n                    <td>{obj.sub}</td>\n                    <td>{obj.count}</td>\n                    <td>{((obj.count/totalComments)*100).toFixed(0)}%</td>\n                </tr>\n            )\n        } else if (type === 'accounts'){\n            return (\n                <tr key={i}>\n                    <td><a href={obj.url} target=\"_blank\" rel=\"noopener noreferrer\">{obj.account+' - '+obj.provider}</a></td>\n                    <td>{obj.count}</td>\n                    <td>{((obj.count/total)*100).toFixed(0)}%</td>\n                </tr>\n            )\n        } else {\n            return (\n                <tr key={i}></tr>\n            )\n        }\n    }\n};\n\nexport default UserTable;","import React, {Component} from 'react';\nimport './UserStats.css';\nimport UserTable from './UserTable';\n\nclass UserStats extends Component {\n    constructor(props){\n        super();\n        this.state = {\n            //arrays to store all data\n            commentData: [],\n            submissionData: [],\n            \n            submissionCount: 0,\n            \n            username: '',//'gamertag-vr',\n            \n            //option to ignore user profile\n            ignoreProfile: false,\n            \n            //option to focus on a single sub\n            focusSub: '',\n            focusCount: 0,\n            \n            //arrays of objects keeping track of numbers\n            domainsSubmittedFrom: [],\n            subsSubmittedTo: [],\n            accountsSubmittedFrom: [],\n            subsCommentedTo: []\n        }\n        this.lock = false;\n        this.queuedUsername = undefined;\n    }\n    \n    render(){\n        const {domainsSubmittedFrom, subsSubmittedTo, subsCommentedTo, accountsSubmittedFrom, username, submissionCount} = this.state;\n        if (username.length === 0){\n            return (\n                <div></div>\n            );\n        }\n        \n        return (\n            <div className=\"userStats roundedBorder\">\n                <div className=\"closeBtn slim button red roundedBorder\" onClick={this.props.setUsername('')}>X</div>\n                <div className=\"userSummary\">\n                    <h3>Available History for {username}</h3>\n                    <p>{this.state.submissionCount} submissions.</p>\n                    <p>{this.state.commentData.length} comments.</p>\n                </div>\n                <div className=\"userTables\">\n                    <UserTable username={username} headings={['Domains Submitted From', 'Count', '%']} data={domainsSubmittedFrom} type=\"domains\" total={submissionCount} totalComments={this.state.commentData.length}/>\n                    <UserTable username={username} headings={['Subreddit Submitted To', 'Count', '%']} data={subsSubmittedTo} type=\"subsSubmitted\" total={submissionCount} totalComments={this.state.commentData.length}/>\n                    <UserTable username={username} headings={['Subreddit Commented In', 'Count', '%']} data={subsCommentedTo} type=\"subsCommented\" total={submissionCount} totalComments={this.state.commentData.length}/>\n                    <UserTable username={username} headings={['Account Submitted From', 'Count', '%']} data={accountsSubmittedFrom} type=\"accounts\" total={submissionCount} totalComments={this.state.commentData.length}/>\n                </div>\n            </div>\n        )\n    }\n    \n    componentDidUpdate(){\n        if (this.state.username !== this.props.username){\n            if (this.lock){\n                this.queuedUsername = this.props.username;\n                return;\n            } else {\n                this.setState({username: this.props.username}, this.gatherData);\n            }\n        }\n    }\n    \n    componentDidMount(){\n        this.gatherData();\n    }\n    \n    getSubmissions = async (username, after = '') => {\n        if (username.length === 0 || this.queuedUsername) return;\n        try {\n            const resp = await fetch('https://www.reddit.com/user/'+username+'/submitted.json?limit=100&after='+after);\n            const json = await resp.json();\n            \n            const submissionData = this.state.submissionData;\n            submissionData.push(...json.data.children);\n            this.setState({submissionData}, this.analyse);\n            \n            if (json.data.after !== null){\n                await this.getSubmissions(username, json.data.after);\n            }\n        } catch (err) {\n            \n        }\n    }\n    \n    getComments = async (username, after = '') => {\n        if (username.length === 0 || this.queuedUsername) return;\n        try {\n            const resp = await fetch('https://www.reddit.com/user/'+username+'/comments.json?limit=100&after='+after);\n            const json = await resp.json();\n            \n            const commentData = this.state.commentData;\n            commentData.push(...json.data.children);\n            this.setState({commentData}, this.analyse);\n            \n            if (json.data.after !== null){\n                await this.getComments(username, json.data.after);\n            }\n        } catch (err) {\n            \n        }\n    }\n    \n    gatherData = async () => {\n        if (this.lock) return;\n        if (this.state.username.length > 0){\n            this.lock = true;\n            this.clearFullData();\n            \n            await this.getSubmissions(this.state.username);\n            await this.getComments(this.state.username);\n            \n            this.lock = false;\n            if (this.queuedUsername){\n                let temp = this.queuedUsername;\n                this.queuedUsername = undefined;\n                this.setState({username: temp}, this.gatherData);\n            }\n            \n        }\n    }\n    \n    clearFullData = () => {\n        this.setState({commentData: [], submissionData: [], domainsSubmittedFrom: [], subsSubmittedTo: [], accountsSubmittedFrom: [], subsCommentedTo: [], submissionCount: 0});\n    }\n    \n    clearArrays = () => {\n        this.setState({domainsSubmittedFrom: [], subsSubmittedTo: [], accountsSubmittedFrom: [], subsCommentedTo: [], submissionCount: 0});\n    }\n    \n    analyse = () => {\n        this.clearArrays();\n        const {submissionData, commentData, ignoreProfile, username, focusSub} = this.state;\n        \n        let submissionCount = 0;\n        const domainsSubmittedFrom = [];\n        const subsSubmittedTo = [];\n        const accountsSubmittedFrom = [];\n        const subsCommentedTo = [];\n        \n        submissionData.forEach(submission => {\n            let data = submission.data;\n            if (ignoreProfile && data.subreddit.toLowerCase() === 'u_'+username.toLowerCase()) return;\n            submissionCount++;\n            this.addSubSubmitted(data, subsSubmittedTo);\n            if (focusSub.length > 0 && data.subreddit.toLowerCase() !== focusSub.toLowerCase()) return;\n            this.addDomain(data, domainsSubmittedFrom);                    \n            this.addAccount(data, accountsSubmittedFrom);\n        });\n        \n        commentData.forEach(comment => {\n            let data = comment.data;\n            this.addSubCommentedTo(data, subsCommentedTo);\n        });\n        \n        domainsSubmittedFrom.sort((a,b) => b.count-a.count);\n        subsSubmittedTo.sort((a,b) => b.count-a.count);\n        accountsSubmittedFrom.sort((a,b) => b.count-a.count);\n        subsCommentedTo.sort((a,b) => b.count-a.count);\n        \n        this.setState({submissionCount, domainsSubmittedFrom, subsSubmittedTo, accountsSubmittedFrom, subsCommentedTo});\n    }\n    \n    addDomain = (data, domainsSubmittedFrom) => {\n        let domain = data.domain;\n        let existingObj = domainsSubmittedFrom.find(obj => obj.domain === domain);\n        if (existingObj === undefined){\n            domainsSubmittedFrom.push({domain, count:1});\n        } else {\n            existingObj.count++;\n        }\n    }\n    \n    addSubSubmitted = (data, subsSubmittedTo) => {\n        let sub = data.subreddit;\n        let existingObj = subsSubmittedTo.find(obj => obj.sub === sub);\n        if (existingObj === undefined){\n            subsSubmittedTo.push({sub, count:1});\n        } else {\n            existingObj.count++;\n        }\n    }\n    \n    addAccount = (data, accountsSubmittedFrom) => {\n        let account, accountLink, provider;\n        \n        if (data.media && data.media.type === 'youtube.com'){\n            account = data.media.oembed.author_name;\n            accountLink = data.media.oembed.author_url;\n            provider = data.media.oembed.provider_name;\n        } else if (data.domain === 'twitter.com') {\n            account = data.url.replace('https://twitter.com/','');\n            let end = account.indexOf('/');\n            account = account.slice(0, end);\n            accountLink = data.url;\n            provider = 'Twitter';\n        } else if (data.media && data.media.type === 'twitch.tv'){\n            account = data.media.oembed.title.replace(' - Twitch', '');\n            provider = data.media.oembed.provider_name;\n            accountLink = data.url;\n        } else {\n            return;\n        }\n        \n        let existingObj = accountsSubmittedFrom.find(obj => obj.account === account);\n        if (existingObj === undefined){\n            accountsSubmittedFrom.push({account, count:1, url: accountLink, provider});\n        } else {\n            existingObj.count++;\n        }\n    }\n    \n    addSubCommentedTo = (data, subsCommentedTo) => {\n        let sub = data.subreddit;\n        let existingObj = subsCommentedTo.find(obj => obj.sub === sub);\n        if (existingObj === undefined){\n            subsCommentedTo.push({sub, count:1});\n        } else {\n            existingObj.count++;\n        }\n    }\n    \n    \n}\n\nexport default UserStats;","import React, { Component } from 'react';\nimport './App.css';\nimport Input from './components/Input';\nimport Region from './components/Region';\nimport Winners from './components/Winners';\nimport Stats from './components/Stats';\nimport UserStats from './components/UserStats/UserStats';\n\nclass App extends Component {\n    constructor(){\n        super();\n        this.state = {\n            regions: [\n                {name: 'EU', qty: 1, variations: ['EU', 'Eu', 'eU', 'Europe', 'UK']},\n                {name: 'NA', qty: 1, variations: ['NA', 'Na', 'nA', 'North American', 'North America', 'North america', 'north america', 'N.A', 'N A', 'US', 'N/A', 'n/a']},\n                {name: '', qty: 0, variations: []}\n            ],\n            ignoredUsers: [],\n            url: '',\n            winners: [],\n            winnersMethod: 'Random.org',\n            winnersStatus: 1,\n            selectedWinner: '',\n            stats: [],\n            total: 0,\n            processText: 'Process',\n            processBlock: false,\n            downloadData: '',\n            status: 0\n        };\n        \n        this.totalComments = 0;\n        this.results = {};\n        this.comments = [];\n        this.currentURL = '';\n    }\n    \n    render() {    \n        \n        let processClass = 'button green';\n        if (this.state.processBlock) processClass = 'button disabled';\n        \n        return (\n            <div className=\"App\">\n                <h1>Reddit Competition Parser</h1>\n                <div className=\"grid\">\n                    <div className=\"url\">\n                        <label>URL</label>\n                        <div className=\"example\">Example: <input type=\"test\" value=\"https://www.reddit.com/r/PSVR/comments/9gykgl/transference_playstation_vr_game_key_giveaway_we/\" readOnly/></div>\n                        <Input onChange={this.setUrl} value={this.state.url} placeholder='URL'/>\n                    </div>\n                    <div className=\"ignored\">\n                        <label>Users to Ignore</label>\n                        <textarea onChange={this.setIgnored} placeholder=\"Such as previous winners. (Must be separated by a new line)\"></textarea>\n                    </div>\n                    <div className=\"regions\">\n                        <label>\n                            Regions \n                            <span onClick={this.addRegion} className=\"slim button green\">+</span>\n                            <span onClick={this.removeRegion} className=\"slim button red\">-</span>\n                        </label>\n                        {\n                            this.state.regions.map((region, i) => {\n                                return <Region setName={this.setRegionName} setVariations={this.setRegionVariations} setQty={this.setRegionQty} \n                                                name={region.name} variations={region.variations} qty={region.qty} index={i} key={i}/>\n                            })\n                        }\n                    </div>\n                    <div className=\"processBtn\">\n                        <button onClick={this.getComments} className={processClass}>{this.state.processText}</button>\n                    </div>\n                    <Stats stats={this.state.stats} total={this.state.total} downloadData={this.state.downloadData}/>\n                    <Winners winners={this.state.winners} pickWinners={this.pickWinners} selectWinner={this.selectWinner} total={this.state.total} method={this.state.winnersMethod} status={this.state.winnersStatus}/>\n                    <UserStats username={this.state.selectedWinner} setUsername={this.selectWinner}/>\n                </div>\n            </div>\n        );\n    }\n    \n    setUrl = (e) => {\n        this.setState({url: e.target.value});\n        if (e.target.value !== this.currentURL){\n            this.setState({processBlock: false, processText: 'Process'});\n        } else {\n            this.setState({processBlock: true, processText: 'Process'});\n        }\n    }\n    \n    setRegionName = (e) => {\n        const regions = this.state.regions;\n        const index = e.target.getAttribute('index');\n        regions[index].name = e.target.value;\n        \n        //just to make it easier if someone removes a region but then wants it back\n        if (regions[index].variations.length === 0 && regions[index].name === 'NA'){\n            regions[index].variations.push(...['NA', 'Na', 'nA', 'North American', 'North America', 'North america', 'north america', 'N.A', 'N A', 'US', 'N/A', 'n/a']);\n        }\n        \n        else if (regions[index].variations.length === 0 && regions[index].name === 'EU'){\n            regions[index].variations.push(...['EU', 'Eu', 'eU', 'Europe', 'UK']);\n        }\n        \n        this.setState({regions});\n    }\n    \n    setRegionVariations = (e) => {\n        const regions = this.state.regions;\n        const index = e.target.getAttribute('index');\n        regions[index].variations = e.target.value.split(',').map(val => val.trim());\n        this.setState({regions}, () => {\n            if (this.comments.length > 0) this.onComplete(this.comments);\n        });\n    }\n    \n    setRegionQty = (e) => {\n        const regions = this.state.regions;\n        const index = e.target.getAttribute('index');\n        regions[index].qty = parseInt(e.target.value) || '';\n        this.setState({regions});\n    };\n    \n    setIgnored = (e) => {\n        this.setState({ignoredUsers: e.target.value.split('\\n')}, ()=>{\n            if (this.comments.length > 0) this.onComplete(this.comments);\n        });\n    };\n    \n    addRegion = () => {\n        const regions = this.state.regions;\n        regions.push({name: '', qty: 1, variations: []});\n        this.setState({regions});\n    }\n    \n    removeRegion = () => {\n        const regions = this.state.regions;\n        regions.pop();\n        this.setState({regions});\n    }\n    \n    selectWinner = (selectedWinner) => {\n        return () => {\n            this.setState({selectedWinner});\n        };\n    };\n    \n    getComments = () => {\n        if (this.state.url.length === 0 || this.state.status === 1 || this.state.processBlock) return;\n        //get json data from Reddit\n        this.totalComments = 0;\n        this.setState({total: 0, winners: [], stats: [], percentage: 0, processText: 'Loading..', status: 1});\n        let allComments = [];\n        \n        fetch(this.state.url+'.json').then(this.handleErrors).then(response => response.json()).then(data => {\n            let comments = data[1].data.children;\n            \n            //keep track of percentage\n            this.totalComments = comments.length;\n            if (comments[comments.length-1].kind === 'more'){\n                this.totalComments += comments[comments.length-1].data.count;\n            }\n\n            let array = [];\n            \n            //add each comments (including replies) to allComments array\n            comments.forEach((comment) => {\n                this.parseChild(comment, allComments, array);\n            });\n                        \n            //if more comments exist, then recursively gather these too\n            // array = [];//REMOVE WHEN DONE TESTING\n            if (array && array.length > 0){\n                let link_id = 't3_'+data[0].data.children[0].data.id;\n                this.getMoreComments(array, link_id, allComments);\n            } else {\n                this.onComplete(allComments);\n            }\n        }).catch(err => {\n            this.setState({status: 0, processText: 'Process', processBlock: false});\n        });\n    }\n    \n    handleErrors = (response) => {\n        if (!response.ok) {\n            throw Error(response.statusText);\n        }\n        return response;\n    }\n    \n    updatePercentage = (comments) => {\n        this.setState({processText: 'Loading - ' + ((comments.length / this.totalComments) * 100).toFixed(0) + '%'});\n    }\n    \n    getMoreComments = (array, link_id, allComments) => {\n        //create string of ids to use with get request\n        let string = '';\n        if (array.length > 0){\n            let subArray = array[0];\n            for (let i = 0; i < 50; i++){\n                if (subArray.length > 0){\n                    string += subArray[0] + ',';\n                    subArray.shift();\n                } else {\n                    //array.shift();\n                    break;\n                }\n            }\n            if (subArray.length === 0) array.shift();\n        }\n        \n        string = string.slice(0,string.length-1);\n        let idsThisTime = string.split(',');\n\n        //use Reddit API to fetch comments based on id strings\n        fetch('https://www.reddit.com/api/morechildren.json?api_type=json&link_id='+link_id+'&children='+string).then(resp => resp.json()).then(data => {\n            let comments = data.json.data.things;\n\n            comments.forEach((comment) => {\n                if (idsThisTime.indexOf(comment.data.id) !== -1) idsThisTime.splice(idsThisTime.indexOf(comment.data.id),1);\n                this.parseChild(comment, allComments, array);\n            });\n            \n            //if comments weren't retrieved, add back to array to try again\n            //if (idsThisTime.length < lengthBefore) array.push(idsThisTime);\n            \n            if (array.length > 0){\n                this.getMoreComments(array, link_id, allComments);\n            } else {\n                this.onComplete(allComments);\n            }\n        });\n    }\n    \n    parseChild = (child, allComments, stringsArr = null) => {\n        if (child.kind === 't1'){\n            let data = child.data;\n            allComments.push(data);\n            this.updatePercentage(allComments);\n            \n            if (typeof data.replies === 'object'){\n                data.replies.data.children.forEach((child) => {\n                    this.parseChild(child, allComments, stringsArr);\n                });\n            }\n        } else if (child.kind === 'more' && stringsArr){\n            stringsArr.push(child.data.children);\n        }\n    }\n    \n    testValue = (value, conditions) => {\n        let match = false;\n        conditions.forEach((condition) => {\n            if (condition.length === 0) return;\n            if (value.indexOf(condition) !== -1) {match = true; return;} //general test to see if value is anywhere within the string, case sensitive\n            \n            if (value.toLowerCase() === condition.toLowerCase()) {match = true; return;} // test for exact match ignoring case (eg. 'eu');\n            \n            let atBeginning = new RegExp('^('+condition+' )', 'i'); //test for match at the beginning with a space after, ignoring case (eg. 'eu please!')\n            if (atBeginning.test(value)) {match = true; return;}\n        });\n        return match;\n    }\n    \n    testRegions = (comment, regions, extras, map) => {\n        //first, check value against each region and set to true or false\n        let result = {};\n        Object.keys(regions).forEach((region) => {\n            result[region] = this.testValue(comment.body, regions[region].conditions);\n        });\n        \n        //count how many regions value tested against\n        let count = 0;\n        Object.values(result).forEach((val) => {\n            if (val) count++;\n        });\n        \n        //if multiple regions, put in others array, otherwise put in region array\n        if (count > 1 || count < 1) {\n            extras.others.push(comment);\n        } else {\n            Object.keys(result).forEach((region) => {\n                if (result[region]) {\n                    regions[region].array.push(comment);\n                    map[comment.author] = true;\n                }\n            });\n        }\n    }\n    \n    sortComments = (comments, regions, extras, map) => {\n        let previousWinners = this.state.ignoredUsers;\n        \n        comments.forEach((comment) => {\n            let body = comment.body;\n            let author = comment.author;\n                    \n            //replace commas and new lines with full stop - otherwise affect the csv formatting\n            body = body.replace(/,/g, '. ');\n            body = body.replace(/\\n/g, '. ');\n            \n            //check if author is a previous winner and skip if true\n            if (previousWinners.indexOf(author) !== -1){\n                extras.ignored.push({author, body});\n                return;\n            }\n            \n            //if authors name is unkonwn, add to extras array\n            if (author === '[deleted]'){\n                extras.others.push({author, body});\n                return;\n            }\n            \n            //if author hasn't already posted a comment, then add to correct list\n            if (!map[author]) {\n                this.testRegions({author, body}, regions, extras, map);\n            } else {\n                extras.duplicates.push({author, body});\n            }\n        });\n    };\n    \n    onComplete = (comments) => {        \n        this.comments = comments;\n        this.currentURL = this.state.url;\n        let regions = {};\n        \n        this.state.regions.forEach(region => {\n            if (region.name.length === 0) return;\n            regions[region.name] = {\n                name: region.name,\n                conditions: region.variations,\n                array: [],\n                qty: region.qty\n            };\n        });\n        \n        let extras = {\n            others: [],\n            duplicates: [],\n            ignored: []\n        };\n        \n        let map = {};\n        let downloadData = \"ID,Username,Type,Text\\n\";\n                \n        //loop through each comment posted\n        this.sortComments(comments, regions, extras, map);\n            \n        //convert each list to csv format\n        function parseList(list, type, hasId){\n            type = type[0].toUpperCase() + type.slice(1);\n            list.forEach((item, index) => {\n                hasId ? downloadData += (index+1) + ',' : downloadData += ',';\n                downloadData += item.author + ',' + type + ',' + item.body;\n                downloadData += '\\n';\n            });\n        }\n        \n        let stats = [];\n        let total = 0;\n        \n        //parse all regions and extras\n        Object.values(regions).forEach((region) => {\n            parseList(region.array, region.name, true);\n            stats.push({\n                name: region.name,\n                qty: region.array.length\n            });\n            total += region.array.length;\n        });\n        Object.keys(extras).forEach((extra) => {\n            parseList(extras[extra], extra, false);\n            stats.push({\n                name: extra,\n                qty: extras[extra].length\n            });\n            total += extras[extra].length;\n        });\n        \n        this.results = regions;\n        \n        //pick some winners\n        //this.pickWinners();\n                \n        this.setState({stats, total, status: 0, processText: 'Process', downloadData: encodeURI(downloadData), processBlock: true});\n    }\n    \n    pickWinners = async () => {\n        const winners = [];\n        \n        this.state.regions.forEach(region => {\n            if (region.name.length === 0) return;\n            this.results[region.name].qty = region.qty;\n        });\n        \n        const regions = Object.values(this.results);\n        for await (let region of regions){\n            let obj = {name: region.name, arr: []};\n            let randomNumbers = await this.getRandomNumbers(region.qty, region.array.length);\n            for (let i = 0; i < region.qty; i++){\n                let random = randomNumbers.shift();\n                const chosen = region.array[random];\n                chosen.id = random+1;\n                if (chosen) obj.arr.push(chosen);\n            }\n            winners.push(obj);\n        }    \n        \n        this.setState({winners});\n    }\n    \n    getRandomNumbers = async (qty, max) => {\n        // fetching from Random.org\n        this.setState({winnersStatus: 0});\n        try {\n            const resp = await fetch('https://api.random.org/json-rpc/1/invoke', {\n                method: \"POST\",\n                mode: \"cors\",\n                headers: {\n                    \"Content-Type\": \"application/json; charset=utf-8\",\n                },\n                referrer: \"no-referrer\",\n                body: JSON.stringify({\n                    jsonrpc: '2.0',\n                    method: 'generateIntegers',\n                    params: {\n                        apiKey: '68ae5679-2cbb-4b25-8ab0-f0da1a524c21',\n                        n: qty,\n                        min: 0,\n                        max: max-1,\n                        replacement: false,\n                    },\n                    id: 1\n                })\n            });\n            const data = await resp.json();\n            \n            this.setState({winnersStatus: 1});\n\n            if (data.error){\n                this.setState({winnersMethod: 'Math.random()'});\n                return this.randomNumberFallback(qty, max);\n            } else {\n                const requestsLeft = data.result.requestsLeft;\n                this.setState({winnersMethod: 'Random.org - Requests remaining: '+requestsLeft});\n                return data.result.random.data;\n            }\n        } catch(err) {\n            this.setState({winnersMethod: 'Math.random()'});\n            this.setState({winnersStatus: 1});\n            return this.randomNumberFallback(qty, max);\n        }\n    };\n    \n    randomNumberFallback = (qty, max) => {\n        let numbers = [];\n        for (let i = 0; i < qty; i++){\n            let random = parseInt(Math.random()*max);\n            while (numbers.includes(random)) random = parseInt(Math.random()*max);\n            numbers.push(random);\n        }\n        return numbers;\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}